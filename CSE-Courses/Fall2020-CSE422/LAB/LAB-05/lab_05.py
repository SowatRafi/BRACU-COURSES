# -*- coding: utf-8 -*-
"""LAB-05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mhzY5E-1xIyLuNk0ZMkNjzOQId1Sz66n

*Necessary Libraries*
"""

import pandas as pd
import numpy as np

"""*Python Sklearn Library Moduels*"""

from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier

"""*Importing CSV file*"""

vol = pd.read_csv('/content/breast cancer classification dataset.csv')
vol.head()

vol.shape

vol.isnull().sum()

vol = vol.drop(['Unnamed: 32'], axis = 1)
vol.shape

vol.isnull().sum()

print('row is null for radius_mean: ', vol['radius_mean'].isnull().sum())

volunteer_subset = vol[vol['radius_mean'].notnull()]

print("Shape after removing null values from column radius_mean: ", volunteer_subset.shape)

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(vol[ ['fractal_dimension_worst']])

impute.fit(vol[ ['radius_mean']])

vol['fractal_dimension_worst'] = impute.transform(vol[ ['fractal_dimension_worst']])

vol['radius_mean'] = impute.transform(vol[ ['radius_mean']])

vol

vol.isnull().sum()

vol

vol.keys()

vol.info()

vol['diagnosis']

vol.head()

vol['diagnosis'].unique()

encoder = LabelEncoder()

vol['diagnosis'] = encoder.fit_transform(vol['diagnosis'])

print(vol[['diagnosis']])

vol

train, test = train_test_split(vol, test_size=0.25, random_state = 1)

y = vol['diagnosis']

x = vol.drop(columns='diagnosis')

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=1)

scaler = MinMaxScaler()

scaler.fit(x_train)

x_train_scaled = scaler.transform(x_train)

print(x_train_scaled.min(axis=0))

print(x_train_scaled.max(axis=0))

x_test_scaled = scaler.transform(x_test)

x_train_scaled

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)

k = KNeighborsClassifier()

k.fit(x_train, y_train)

print("Test set accuracy before: {:.2f}".format(k.score(x_test, y_test)))

scaler = MinMaxScaler()
scaler.fit(x_train)

x_train_scaled = scaler.transform(x_train)

x_test_scaled = scaler.transform(x_test)

k.fit(x_train_scaled, y_train)

print("Scaled test set accuracy after: {:.2f}".format(k.score(x_test_scaled, y_test)))

vol

volunteer_p = vol.corr()
volunteer_p

"""***SEABORN Library***"""

import seaborn as sns

sns.heatmap(volunteer_p, cmap='YlGnBu')

y = vol['diagnosis']

y

x = vol.drop(columns='diagnosis')

x

